[package]
name = "blog_os"
version = "0.1.0"
authors = ["finnkauski <iwiivi@gmail.com>"]
edition = "2018"

[dependencies]
bootloader = "0.9.8"
rlibc = "1.0.0"
volatile = "0.2.6"

# Provies a Mutex that is very minimal -
# try to lock until you managed to do that
# otherwise spin. This is required as the
# OS at this level doesn't have the concept of
# threads and is unable to handle things like Mutex.
[dependencies.spin]
version = "0.5.2"

# Adding this as we need to initialise a WRITER that
# is static. However Rusts `const evaluator` is not
# able to do that at the moment at compile time.
#
# So this package helps us establish a static WRITER,
# the first time it is required.
[dependencies.lazy_static]
version = "1.0"
features = ["spin_no_std"]

# Helps us invoke `in` and `out` instructions to send data to
# IO devices.
[dependencies.x86_64]
version = "0.11.0"

# Helps us use serial to communicate with the stdio of the
# caller for cargo test.
[dependencies.uart_16550]
version = "0.2.0"

# Allows us to have an IO device that we can send some data
# to close QEMU
[package.metadata.bootimage]
test-args = [ # - enables shutdow device              -  - enables piping from serial to stdio -
    "-device", "isa-debug-exit,iobase=0xf4,iosize=0x04", "-serial", "stdio",
    "-display", "none" # Hide any display from QEMU
] # redirects serial to stdio.
test-success-exit-code = 33 # change exit code as the ones supported by QEMU clash
test-timeout = 150 # in case we get into an infinite loop
# in Cargo.toml

[[test]]
name = "stack_overflow"
harness = false
